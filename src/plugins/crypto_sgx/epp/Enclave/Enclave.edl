/*
 * Copyright (C) 2011-2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    include "sgx_eid.h"
    from "sgx_tsgxssl.edl" import *;

    trusted{
            public void aed_init(uint32_t spi, uint8_t is_encrypt, uint32_t enc_alg, uint32_t int_alg,
				[user_check] uint8_t* keydata, [user_check] uint8_t* int_keydata, uint32_t int_keylen);
	    public void do_aed(uint32_t spi, uint8_t is_encrypt, 
                                [user_check] uint8_t* iv, [user_check] uint8_t* src, uint32_t slen,
			    	[user_check] uint8_t* dst, [user_check]int* dlen,
				[user_check] uint8_t* int_src, uint32_t int_slen,
				[user_check] uint8_t* int_dst, [user_check]uint8_t* int_dlen, 
                                [user_check] int* e_ret) transition_using_threads;
            public void do_dummy(void);

            public void cipher_init(uint32_t spi, uint8_t is_encrypt, uint32_t alg, 
                                    [user_check] uint8_t* keydata);
            public void hmac_init(uint32_t spi, uint32_t alg, 
                                  [user_check] uint8_t* keydata, uint32_t keylen);

            public void do_cipher(uint32_t spi, uint8_t is_encrypt,
                                  [user_check] uint8_t* iv, 
                                  [user_check] uint8_t* src, uint32_t slen,
                                  [user_check] uint8_t* dst, [user_check]int* dlen) transition_using_threads;
            public void do_cipher_gcm(uint32_t spi, uint8_t is_encrypt,
                                  [user_check] uint8_t* iv, uint32_t ivlen,   
                                  [user_check] uint8_t* aad,  uint32_t aad_len,
                                  [user_check] uint8_t* src, uint32_t slen,
                                  [user_check] uint8_t* dst, [user_check]int* dlen,
                                  [user_check] uint8_t* tag, uint8_t taglen, 
                                  [user_check]int* e_ret) transition_using_threads;
            public void do_hmac(uint32_t spi,
                                  [user_check] uint8_t* src, uint32_t slen,
                                  [user_check] uint8_t* dst, [user_check] uint32_t* dlen) transition_using_threads;
    };

    untrusted{
            void ocall_print([in, string]const char* str);
            void ocall_form(void);
    };

};
