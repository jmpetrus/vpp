/*
 * Copyright (C) 2011-2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    include "sgx_eid.h"
    from "sgx_tsgxssl.edl" import *;
    from "sgx_tae_service.edl" import *;

    trusted{
            public void generate_random_number([user_check] uint8_t* rand, uint32_t rlen);
            public void init_session(uint64_t spi);
            public void generate_dh(
                                    uint8_t is_initiator,
                                    uint64_t spi,
                                    uint32_t klen,
                                    [user_check] uint8_t* i_dh_data, uint32_t iklen,
                                    [user_check] uint8_t* r_dh_data, 
                                    [user_check] const char* dh_p, 
                                    [user_check] const char* dh_g
                                    , [user_check] uint8_t* data
	    );
	    public void complete_dh(
                                    uint64_t spi,
                                    uint32_t klen,
                                    [user_check] uint8_t* r_dh_data, uint32_t rklen,
                                    [user_check] const char* dh_p, 
                                    [user_check] const char* dh_g
                                    , [user_check] uint8_t* data
	    );

            public void seal_crypto_context(
                                    uint8_t is_initiator, 
                                    uint64_t spi,
                                    [user_check] uint8_t* sealed_data,
                                    [user_check] uint32_t* sealed_size
            );
            public void calc_prf(
                                    uint64_t spi,
                                    uint8_t type,
                                    uint8_t mode,
                                    uint8_t is_initiator,
                                    uint16_t tr,
                                    [user_check] uint8_t* data, uint32_t dlen, 
                                    [user_check] uint8_t* out,
                                    [user_check] uint32_t* olen 
            );
            public void calc_prfplus(
                                    uint64_t spi,
                                    uint8_t is_parent,
                                    uint8_t mode,
                                    [user_check] uint8_t* data, uint32_t dlen,
                                    uint32_t dkey_len,
                                    uint32_t ikey_len,
                                    uint32_t ekey_len,
                                    uint32_t pkey_len
                                    , [user_check] uint8_t* keymat 
            );
            public void calc_integr(
                                    uint64_t spi,
                                    uint8_t is_initiator,
                                    uint8_t mode,
                                    [user_check] uint8_t* data, uint32_t dlen,
                                    [user_check] uint8_t* out, 
                                    [user_check] uint32_t* olen
            );
            public void decrypt_data(
                                    uint64_t spi,
                                    uint8_t is_initiator,
                                    uint8_t mode,
                                    uint8_t block_size,
                                    [user_check] uint8_t* data, uint32_t dlen,
                                    [user_check] uint8_t* out, 
                                    [user_check] uint32_t* olen
            );

            public void encrypt_data(
                                    uint64_t spi,
                                    uint8_t is_initiator,
                                    uint8_t mode,
                                    uint8_t block_size,
                                    [user_check] uint8_t* data, uint32_t dlen,
                                    [user_check] uint8_t* out, 
                                    [user_check] uint32_t* olen
            );

    };

    untrusted{
            void ocall_print([in, string]const char* str);
    };

};
